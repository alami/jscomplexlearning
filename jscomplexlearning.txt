---------------------------------------------------------------------------------------
Мелюков
Сергей
Главный преподаватель курса «Senior Engineer фронтенд архитектуры в компании Avito »
«Комплексное обучение JavaScript »
Введение
0-00
1-04
---------------------------------------------------------------------------------------
01 Вебинар — Введение
02 Git
03 Как работает JavaScript
04 Переменные и функции
05 Вебинар — Практика
06 Объекты и массивы
07 Обработка ошибок
08 Вебинар — Практика
09 DOM
10 Асинхронность
11 Вебинар — Практика
12 Работа с сетью
13 Browser API
14 Вебинар Практика
15 Работа с VK API и шаблонизация
16 ООП
17 Вебинар Практика
18 MV-паттерны
19 Модули
20 Вебинар Практика
21 Вебинар Node.js (краткое знакомство)
22 Тестирование JS-кода 
23 Вебинар — Практика (Закрытие)
---------------------------------------------------------------------------------------
01 Вебинар — Введение
---------------------------------------------------------------------------------------
02 Git
1. Введение.mp4
	 7-00
2. Установка. Настройка.mp4
3. Инициализация.mp4
4. Добавление файлов.mp4
5. Первый коммит.mp4
6. Отмена изменений.mp4
7. Типичный цикл работы с git.mp4
8. Ветки. Создание и слияние.mp4
9. Конфликты при слиянии.mp4
10. Временное сохранение.mp4
11. Работа с GitHub.mp4
	20-00
12. GitHub Pages.mp4
links.txt
Система контроля версий Git Справочник.pdf
Система контроля версий Git часть I.pdf
Система контроля версий Git часть II.pdf

---------------------------------------------------------------------------------------
03 Как работает JavaScript
8-00 Render Engine HTML/CSS
     Script Engine JS
9-00 --шаги--- напр.,  var a = 1 + 1
Парсинг      - разбиение, | var | a | = | 1 | + | 1 |
Генерация AST- VariableDeclaration
-древовидная     -Indetifier (a)
структура        -BinaryOperator (+)
                    -Literal (1)
                    -Literal (1)
Трансляция   - 1010101010010101
Оптимизация  - 11100001+
Выпонение
13-42 IDE, linter, .. работают с помошью 1б шагов
14-20 и сборщики (webpack)
15-23 EcmaScript 262 - спецификация++
      JavaSCript     - тех.реализация спец-ии
16-29 2009 | ES5
      2015 | ES6 (EC-2015)
      2016 | ES7 (EC-2016)
      2017 | ES8 (EC-2017)
19-53 TC-39 : контрибьютор: Strawman-Proposal-Draft-Candidate-Finished - вкл в стандарт
24-00
---------------------------------------------------------------------------------------
04 Переменные и функции
---------------------------------------------------------------------------------------
1. Переменные.mp4
var name = 'Sergey'
2. Функции.mp4 - кофемолки
3. Область видимости и замыкание.mp4
 var someVar = 20;      ---глобальные переменные :someVar, someOtherVar,sum
 var someOtherVar = 30; --/
 function sum (a,b) {  --2 параметра--2 области видимости
  result = a+b;   --1 переменная ---/    = список пременных кот.сейчас доступны
  return result;       --собственная : a,b,result
  }
2-51 Каждая ф-ция помнит где была объявлена (область видимости)
                и помнит список доступных переменных !!, где была объявлена [стек]
   напр "sum" помнит a,b,someVar, someOtherVar
3-47 function sum (a,b) {
       result = a+b + someVar + someOtherVar; //т.к.нет в ф-ции, подымается выше...
       return result;
       }
7-21 ==> замыкание  == 2-51
    a=10 //-------------замыкание
    function fn1(b,c) {
        function fn2(d,e) {
            return a+b+c+d+e
        }
        return fn2(3,4)
    }
    console.log(fn1(1,2))
4. Всплытие hoisting.mp4 - всплывает все объявления перемненных
5. Типы объявления функций.mp4
    function declaration - всплывает ф-ция полностью...              ....=> сработает
    function expression -  всплывает только объявление перемненой - но не присвоение,
                            т.е. такая ф-ция написанная позже применения => не сработает
                          - ф-ция объявляемая в контексте др.выражения
6. Стрелочные функции.mp4 - ES6
    var sum1 = function (a,b)    { return a+b }
    var suma =          (a,b) => { return a+b }  //если 1 выражение - убрать {return..}
    var sumb =          (a,b) =>  a+b
    console.log(sumb(10,20))
    var ar = [1,2,3,4]
    console.log( ar.map (function (n) {return n*n }) )
    console.log( ar.map ((n)=> n*n ) )           //если 1 параметр - убрать ()
    console.log( ar.map (n=> n*n ) )

7. Let.mp4 - не всплывает ! => доступны только в блоке где объявлены,
8. Const.mp4
Методичка — Функции.pdf
---------------------------------------------------------------------------------------
05 Вебинар — Практика - Вопросы
12-19 Счетчик function retCnt1(init) {
                  var cnt=init
                  return function () {
                      return ++cnt     } }
              f1 = retCnt1(0) --2 области видимости - разные "cnt", ф-ции,..
22-00         f2 = retCnt1(0) -/    !! и даже переменные когда загнали при объявлении
              console.log(f1()) //1        и только при объявлении !!
              console.log(f1()) //2
              console.log(f1()) //3
              console.log(f2()) //1
1-04 const Объекты -  не можете менять сам объект, но значение можно

Ф-ция с неиз.кол-вом аргументов, можно исп-ть массив
    function sum (numbers) {
        let result = 0;
        for (let i=0; i<numbers.length;i++) {
            result += numbers[i]
        }
        return result
    }
    const result = sum([2,2,5,7,9])
    console.log(result)
1-12-00 а можно исп-ть arguments - специальная переменная - в любой ф-ции, кроме стрелочной
1-13-41   - объект оч.сильно похож на массив (притворяется), с числовыми ключами
    arguments = {'0':2,'1':2,'2':5,'3':7,'4':2, length:5}

1-16-00 Рекурсия - зеркало в зеркале
    стек вызовов ф-ций ||||||||  <->
1-25 а если неизвестно кол-во ф-ций, или
   вызывает сама себя - рекурсия - вообще бесконечно
   => надо основить => контролируемая рекурсия
   еще надо возращать значение ф-ций

---------------------------------------------------------------------------------------
06 Объекты и массивы
---------------------------------------------------------------------------------------
1. Строковая интерполяция.mp4   ES6 =- спец маркеры, как в шаблонах:
       `${name} ${lastname} (${age})`
2. Объекты.mp4 - позволяет хранить не 1, а неск-ко значений данных
    var o = {name: 'Serg', lastname: 'Mel', age: 40}
              имя:значение
  обращение: 1) точечная нотация,2) скобочная
3. Массивы.mp4 - спец тип объектов для храниния упорядоченно
   var ar = []
   обращение: ar[0]
4. Деструктурирующее присваивание для Массива :
5-57 var [a,b] = [1,2]
   [переменные]=[массив]
9-31 var input = 'Sergey Petrov'
     var [name, lastname] = input.split(' ')
     var [ , lastname] = input.split(' ')
21-17 function hi ([ ,name, secondname='' ]) {
        console.log(`Hi, I am ${name} ${secondname}`)
        }
      hi (input.split(' '))
5. Деструктурирующее присваивание- Объекты.mp4
  - аналогично, но порядок не имеет значение, а только имя переменной
  => не нужно пропусков для ненжных переменных, также можно задавть умолчания
        user = {name:'Sergey', secondname: 'Petrovich'}
        var {name, secondname} = user
        console.log(`Hi, I am ${name} ${secondname}`)
6. Spread-оператор.mp4 - превратить массив "numbers" при ОБРАЩЕНИИ к ф-ции
          в парамерах ф-ции в список аргументов ,т.е. разбросать
      sum (...numbers)
7. Rest-оператор.mp4 - похож на Spread-оператор, но в ПАРАМЕТРАХ ф-ции
      function sum (first, ...rest)
      var [first, ...rest] = [1,2,3,4]  -- или просто для перемнных кода
8-59 объединить массив
    numbers = [1,2,3,4]
    number2 = [5,6,7,8]
    var result = numbers.concat(number2)  = [...numbers,...number2]
8. Цикл for-of.mp4
9. Symbol. mp4 - сгенерировать - исключить конфликты имен, не видны в for-of
    Зачем, например:
7-00 Итераторы - кусок кода, кот умеет ЧТО-ТО перебирать (Продвинутая тема)
12-00 - основная концепция JS => for,for-of,spred, rest.. 
var interator = {
  next() {  ---основной метод
    return {value: 1,
            done: false
            }
  }
}
20-41 arguments - спец объект с итератором - внутри
    но как узнать что он есть в объекте ? => Symbol.iterator

_06 links.txt
_06 Методичка — Объекты и массивы.pdf
---------------------------------------------------------------------------------------
07 Обработка ошибок
---------------------------------------------------------------------------------------
1. Инструменты браузера.mp4
2. Обработка ошибок.mp4
13-00 ф-ция по умолчанию всегда "return undefine"
     напр.,  если ф-ция не находит никаго "return .."
20-00 пытались обрабтать искл.ситуации
21-23 isFinite() -----
22-43 ..аж 4 проверки, на разных языках, понять что конкретно произошло
24-24     => нужен искл.мех-зм - генерировать спец.объекты, отдавливать,...
25-26 try ..catch.. - всегда в паре
26-12 throw new Error('строка сообщения') - пометка о странном проишествии
      => переход в ..catch (e) {e.'строка сообщения'..
3. Стек вызовов.mp4
1-33 call stack -> пирамидка то прибавляется ---> , то умен. <-----
3-00 глубина стека
11-45 НО в случае throw new Error() будет искаться ближайший  try ..catch..,
 т.е. программы в стеке не будут продолжаться, а  выбрасываться из стека до ближайшего try ..catch..,



4. Отладка.mp4
_07 links.txt
_07 Методичка Обработка ошибок.pdf
---------------------------------------------------------------------------------------
08 Вебинар — Практика
        присваивание Объектов
        удаление элеентов массива
        map/set
Q: console.time('1')  ... console.timeEnd('1')
10-35 $('div')       --1-ый элем
     $$('.divclass') --все элементым с таким классом->[массив]
     $0 - тек.кот выбран во вклдке "Elements"
     $1 ... - предыдущий...., кот выбран во вклдке "Elements"
13-19 Q: throw  <-> try-catch  -- важно только 2 момента в коде:
 1) выброс исключения    - 1 код->throw, - ! не надо здесь же обрабатывать !
 2) обработка исключения -другое место, где используем "опасное" выражение - обрамляем try-catch
   чтобы не пролучить ERR в консоли или броузере
   но можете вообще не ловить исключение
14-47 -1) вообще не обязательно выбрасывать ERROR
try {
    throw '!!!-------!!!'//необязательно  ERROR
} catch (e) {
    console.log(e)  //<---- "e" - это объект исключения, все что угодно, напр. "строка"
}
15-02 ERROR - это семантическая штука, от нее можно наследовать класс MyError,
   напр. видеть стек по которому он прошел, просто яснее чем обычная  "строка"

17-06 Q: reduce - из мн-ва значений сделать 1, напр, сумму
    a=[1,2,3,4] //_всегда передается 1)рез-т предыдущей операции(начиная с 1го), 2)тек.элем
    b=a.reduce((all,currect)=>{
        return all += currect
    },100)
24-25  ^----есть еще 3ий - элем, кот.передется на 1ой итерации =>[т.е.циклов на 1 больше]

26-52 Q: elem1.append(elem2)  заменить на innerHTML
29-13 Q: Symbol Iterator - не в любом объекте
    for (const elem of {
        foo: 1, bar:2, [Symbol.iterator]() {
            return {
                next() {
                    if (this._first++<2)
                          return {value: this._first, done: false}
                    else return {done: true}
                },
                _first: 0
            }
        }
    }) {console.log(elem)}
29-42 ---присваивание Объектов
30-42 foo, bar - метапеременные, чтобы не исп-ть св-во1, ..2,..., чтобы на их примерах что-то демонстрировать
33-37 JS в переменной под объект [не примитив] хранится адрес, а не сам объект
=> a=b будут хранить не 2 копии объекта, а 2 адреса на 1н объект

--- https://medium.com/devschacht/daniel-li-not-everything-in-javascript-is-an-object-82fe5026e1a2 ---
В JavaScript существует 6 примитивных типов данных
 - не имеют методов
 - сохраняются как значения, в отличие от объектов, хранящихся в качестве ссылки
1) Булевые значения — true или false 2) null 3) undefined
4) number - 64-битный флоат (в JavaScript нет целых чисел) 5) string
6) symbol (появился в ES6) +7) хранилище ключей const object = { key: "value" } (в ES)
Функция — это особый тип объекта
  - со специальными свойствами [Метод ?], например, constructor и call.
                          - Метод — это свойство объекта, являющееся функцией.
  - И как к обычным объектам, вы можете добавлять новые свойства
Объекты-оболочки - String, Number, Boolean, Function
 - сущест-ют для соответствующих типов
 - и есть одноименные функций, как
  => JavaScript не возмущается, когда пытаетесь получить  длину,
     присвоить свойство примитивному типу или сравнить его с объектом, ...
     потому что присвоение выполняется на временном объекте-оболочке,
     (Автоупаковка (autoboxing) - потом удаление),
     а не на самом примитивном типе.
 =>
-----------------------------------
36-07 копировать/клонировать через спред  const b = {...a}
    т.е. как с массивами
37-03 но с вложенными объектами, опять будут указывать на 1 и тот под-объект
37-32 я  использую рекурсию для вложенного клонирования

38-17 это касается массивов и ф-ций

43-29---удаление элементов массива <> св-ва объекта
delete ab.bar  ---> { foo: 1, bar: 3 } ==> { foo: 1 }
delete  a[1]  ----> [ 1, <1 empty item>, 3, 4 ]
46-06 => a.splice(1,1)                         - вырезает и/или добавляет элементы
          начало--^ ^--и сколько /----и потом список вставки (! НЕ замены) туда же =>
49-00   a.splice (1,0, "hel", "JS") --т.е.но и добавлять => [ 1, 'hel', 'JS', 3, 4 ]

1-03-47 не путать с slice (1,3) - копирует массив - срез с 1 го по 3й элемента
                   начало--^ ^--конец
50-10 -------------------Map/Set ---------------------------------
const student = {}
54-39 - другие объекты не могут использоваться в качестве ключей,
 т.к объект нужно привести к строке, при этом выдаст  '[object Object]'
    const ss1 = {name: "Mary"}
    const ss2 = {name: "Gary"}
    const students = {}
    students [ss1] = 5    ----> students ['[object Object]']
    students [ss2] = 1    ----> students ['[object Object]'], т.е одно и то же !
    console.log(students, students [ss1]) ---->  { '[object Object]': 1 } 1
55-31 если надо чтобы объкт имел ключами др.объект => спец тип объекта - карта соотвествий
    const studentss = new Map ()
    studentss.set (ss1, 5)
    studentss.set (ss2, 1)
    console.log(studentss, studentss.get (ss1))
       Map { { name: 'Mary' } => 5, { name: 'Gary' } => 1 }       5


58-16 еще стр-ра данных ------  Set  -----------набор
 для массива только уникальных значений - достаточно также обернуть
    const arrSet = new Set ([1,2,3,4,5])  ------> Set { 1, 2, 3, 4, 5, 10 }
    arrSet.add(10)
    arrSet.add(10)
    for (const el of arrSet) console.log(el)  ---поддерживает фильтрацию for/of
вместо
     function addUserInput (ar, val) { ---без ф-ций фильтрации или логики
           if (!ar.includes (val)) ar.push (val)
       }
       addUserInput(a,10)
       addUserInput(a,10)
1-05-06 - разница в том, с чем работают
        for(i) ----------------- с перебором инд. массива
        for (const key in arr) - с перебором св-в объекта -> key, arr[key] == for(i) для объекта
        for (const el  of arrSet) - с Итератором  объекта
                  [el - уже элементы, а не индексы|св-ва --- 29-13 Q: Symbol Iterator ]

1-10-56 Symbol Iterator- это ф-ция - их использует for/of ...spred операторы
    const a {
        [Symbol Iterator](){

        }
    }
хотя        typeof Symbol Iterator === 'symbol'
---------------------------------------------------------------------------------------
09 DOM
---------------------------------------------------------------------------------------
1. DOM (Document Object Model).mp4
узлы - откр.элем. - аттрибуты - текстовый узел - др.узлы - закр.элем.
=> HTML page = DOM structurs = DOM дерево
    "document" имеет кучу команд, в каждом браузере
8-34 --найти и изменить
     const element = document.querySelector('#container')
     element.style.color = 'red'
     сonst element1 = document.querySelector('.hello')
     element1.textContent = 'Новый текст'
12-13 --создание
    const element1 = document.createElement('div')
    element1.textContent = 'Новый текст div'
    container.appendChild(element1)

2. DOM-события.mp4  <- нажатия кнопок, ссылок, мышкой по экрану
0-51 мы можем перхватывать и исполнять свой код
1-27 научимся добавлять события на разные кнопки
        const myButton = document.querySelector('#myButton')
        myButton.addEventListener('click', function (){
            console.log('клик на кнопке')
        })
9-27 (+)модификация дом-дерева
11-24 const phone = document.querySelector('#phone')
      phone.addEventListener('keydown', function (event){
          let isDigit = false
          if(event.key >= 0 || event.key <= 9 ) isDigit = true
          if (isDigit) console.log('digit')
          else event.preventDefault() --
      })
12-11 действия по умолчанию - не у всех полей, у текстовых - есть
17-27 нет реакции на <-, ->, del, ...
3. Обработка ввода.mp4
const phone = document.querySelector('#phone')
phone.addEventListener('keydown', function (event){ <--особая -всегда приходит 1 аргумент
    console.log('keydown')          - спец объект с инфо о событии
})

4. Работа с формами.mp4
5. Рабочий пример.mp4
6. Обход DOM-дерева.mp4
_09 Методичка DOM.pdf

---------------------------------------------------------------------------------------
10 Асинхронность
---------------------------------------------------------------------------------------
10 Асинхронность\1 Таймеры.mp4
10 Асинхронность\10 Методичка Асинхронность.pdf
10 Асинхронность\2 Promise.mp4
10 Асинхронность\3 Async-Await.mp4
10 Асинхронность\links.txt
---------------------------------------------------------------------------------------
11 Вебинар — Практика
---------------------------------------------------------------------------------------
12 Работа с сетью
---------------------------------------------------------------------------------------
12 Работа с сетью\1 Асинхронные сетевые запросы.mp4
12 Работа с сетью\2 JSON.mp4
12 Работа с сетью\3 Fetch.mp4
12 Работа с сетью\4 WebSocket.mp4
12 Работа с сетью\5 Service Worker.mp4
12 Работа с сетью\_12 links.txt

---------------------------------------------------------------------------------------
13 Browser API
---------------------------------------------------------------------------------------
13 Browser API\1 LocalStorage.mp4
13 Browser API\2 Cookies.mp4
13 Browser API\3 Навигация_ hash.mp4
13 Browser API\4 Навигация_ history.mp4
13 Browser API\5 File API.mp4
13 Browser API\_13 Методичка BOM.pdf

---------------------------------------------------------------------------------------
14 Вебинар Практика
14 Вебинар Практика\Вебинар — Практика от 22.02.2020 12_00.mp4
14 Вебинар Практика\Код с вебинара.zip
---------------------------------------------------------------------------------------
15 Работа с VK API и шаблонизация
---------------------------------------------------------------------------------------
15 Работа с VK API и шаблонизация\1 Шаблонизация.mp4
15 Работа с VK API и шаблонизация\15 Методичка — HTML5 API.pdf
15 Работа с VK API и шаблонизация\15 Методичка — SDK.pdf
15 Работа с VK API и шаблонизация\2 VK SDK.mp4
---------------------------------------------------------------------------------------
16 ООП
---------------------------------------------------------------------------------------
16 ООП\1 Intro.mp4
16 ООП\16 Методичка ООП.pdf
16 ООП\2 Инкапсуляция.mp4
16 ООП\3 Наследование.mp4
16 ООП\4 Полиморфизм.mp4
16 ООП\5 Классы.mp4
16 ООП\links.txt
---------------------------------------------------------------------------------------
17 Вебинар Практика
17 Вебинар Практика\17 Вебинар.mp4
17 Вебинар Практика\17 Код с вебинара.zip

---------------------------------------------------------------------------------------
18 MV-паттерны
---------------------------------------------------------------------------------------
18 MV-паттерны\1 Паттерны MV.mp4
18 MV-паттерны\18 Код с видеокурса MV.zip
18 MV-паттерны\18 Методичка MV-паттерны.pdf
18 MV-паттерны\2 MVC.mp4
18 MV-паттерны\3 MVVM.mp4
---------------------------------------------------------------------------------------
19 Модули
---------------------------------------------------------------------------------------
19 Модули\1 Модульность в JS.mp4
19 Модули\2 Перевод проекта на модули.mp4
19 Модули\3 ES6-модули.mp4
---------------------------------------------------------------------------------------
20 Вебинар Практика
20 Вебинар Практика\20 Вебинар — Практика.mp4
21 Вебинар Node.js (краткое знакомство)\21 links.txt
21 Вебинар Node.js (краткое знакомство)\21 вебинар.mp4
---------------------------------------------------------------------------------------
21 Вебинар Node.js (краткое знакомство)
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
22 Тестирование JS-кода
---------------------------------------------------------------------------------------
22 Тестирование JS-кода\1. Тестирование кода from loftschool.mp4
22 Тестирование JS-кода\2. Jest.mp4
22 Тестирование JS-кода\22 dop.txt
22 Тестирование JS-кода\3. Польза тестов.mp4
22 Тестирование JS-кода\4. Coverage.mp4
---------------------------------------------------------------------------------------
23 Вебинар — Практика (Закрытие)
---------------------------------------------------------------------------------------
23 Вебинар — Практика (Закрытие)\23 links.txt
23 Вебинар — Практика (Закрытие)\23 Вебинар Практика (Закрытие).mp4

_homework\01
_homework\02
_homework\03
_homework\04
_homework\05
_homework\06
_homework\01\dz_1.zip
_homework\01\Неделя #1 Настройка окружения, сборка, начало работы _ LoftSchool.pdf
_homework\02\dz3.zip
_homework\02\dz_2
_homework\02\dz_2.zip
_homework\02\Неделя #2 Объекты и массивы. Обработка ошибок _ LoftSchool.pdf
_homework\02\dz_2\dz_2
_homework\02\dz_2\dz_2\src
_homework\02\dz_2\dz_2\test
_homework\02\dz_2\dz_2\src\index.js
_homework\02\dz_2\dz_2\test\index.js
_homework\03\dz4.zip
_homework\03\dz5.zip
_homework\03\Неделя #3 Работа с DOM. DOM Events _ LoftSchool.pdf
_homework\04\dz6.zip
_homework\04\dz7.zip
_homework\04\Неделя #4 Асинхронность и работа с сетью. Создание редактора cookie _ LoftSchool.pdf
_homework\05\geootzyvmaket.zip
_homework\05\video.txt
_homework\05\Неделя #5 Работа над ВП №1 _ LoftSchool.pdf
_homework\06\ВП2.psd
_homework\06\Неделя #6 Работа над ВП №2 _ LoftSchool.pdf