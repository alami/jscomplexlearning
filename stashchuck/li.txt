
01 Введение
02 Самое важное в JavaScript и console.log
03 Переменные и типы
04 Объекты
05 Мутация объектов
06 Функции
07 Области видимости
08 Операторы
09 Логические операторы
10 Оператор разделения на свойства
11 Конкатенация строк
12 Функциональные выражения и стрелочные функции
13 Обработка ошибок
14 Инструкции
15 Массивы
16 Деструктуризация
17 Условные инструкции
18 Тернарный оператор
19 Циклы
20 Модули
21 Классы и прототипы
22 Промисы
23 Асинхронные функции
24 Завершение

01 Введение\001 Введение.mp4
01 Введение\002 Как выполнять код.mp4

02 Самое важное в JavaScript и console.log\003 Самое важное в JavaScript.mp4
02 Самое важное в JavaScript и console.log\004 Что такое console.log.mp4
02 Самое важное в JavaScript и console.log\005 Выражения.mp4

03 Переменные и типы\006 Переменные.mp4
03 Переменные и типы\007 Объявление переменных.mp4
03 Переменные и типы\008 Практика по созданию переменных.mp4
03 Переменные и типы\009 Примитивные типы.mp4
03 Переменные и типы\010 Ссылочный тип.mp4
03 Переменные и типы\011 Динамическая типизация.mp4

04 Объекты\012 Объекты.mp4
04 Объекты\013 Создание и удаление свойств объектов.mp4
04 Объекты\014 Вложенные свойства.mp4
04 Объекты\015 Сокращенный формат записи свойств.mp4
04 Объекты\016 Глобальные объекты.mp4
04 Объекты\017 Методы объекта.mp4
04 Объекты\018 JSON - JavaScript Object Notation.mp4

05 Мутация объектов\019 Мутация в JavaScript.mp4
05 Мутация объектов\020 Как избежать мутаций объектов.mp4

--- 06 Функции ---------------------- см. 06funcMutable.js
021 Что такое функция.mp4
022 Объявление и вызов функции.mp4
023 Передача значения по ссылке.mp4
    нежелательно мутировать внешний объект => создают копию
    const updatedPerson = Object.assign( {}, person)

024 Колбэк функции.mp4  :   1 ф-ия вызывает др.ф-ию
    function fnWithCallback (callbackFunction) {
        callbackFunction()
    }
    fnWithCallback(anotherFunction)  --аргумент др.ф-ция
    function anotherFunction () { console.log('anotherFunction') }
    или
     setTimeout(anotherFunction, 1000)

025 Правила работы с функциями.mp4

--- 07 Области видимости ---------------
026 Области видимости.mp4
    глобальные - Windows (web)  и Global (node)
        vs. локальные (в ф-ции)
027 Цепочка областей видимости.mp4
    ф-ции в ф-ции
const a=5
function myFn() {
    function innerFn() { --КАЖДЫЙ вызов myFn() будет создаваться новый innerFn() !!
        console.log(a)   --c еще новой ЛОКАЛЬНОЙ областью видимости  -- 5
    }  <--причем после завершения и ф-ция,и локальная область,и ее переменные УДАЛЯЮТСЯ
    innerFn()  --вызывается только внутри, где объявлена,=> снаружи (W-Global) недоступна
}
myFn()  -->undefined, т.к. нет своей "return 0" например

028 Жизненный цикл переменных.mp4
029 Типы областей видимости.mp4
    глобальные  ф-ции   блока{let..const}
    0)необъ явленная переменная , будет АВТО-объявлена в глобальной
    1)объявлять 2)const-предпочтительней 3) не изменять из внешних
    4)парам.ф-ции тоже лок.перем.получающие значения во время вызова.
030 Строгий режим.mp4  'use strict'  ->0)
--- 08 Операторы ---------------------
031 Операторы.mp4
032 Оператор присваивания.mp4
033 Унарные и бинарные операторы.mp4
034 Форматы записи операторов.mp4
035 Приоритетность операторов.mp4
036 Логические операторы.mp4
037 Ложные значения.mp4
038 Практика с typeof оператором.mp4
--- 09 Логические операторы ------------------
039 Оператор НЕ.mp4
040 Оператор короткого замыкания И.mp4
041 Оператор короткого замыкания ИЛИ.mp4
042 Трюк с оператором И и вызовом функции.mp4
043 Цепочки выражений с операторами И и ИЛИ.mp4
--- 10 Оператор разделения на свойства\044 Оператор разделения объекта на свойства.mp4 -----
--- 11 Конкатенация строк\045 Конкатенация строк.mp4 --------
--- 12 Функциональные выражения и стрелочные функции -----------
046 Функциональные выражения.mp4
    ^--АНОНИМНАЯ ф-ция в отличие от объявленной, кот имеет ИМЯ и можно исп-ть автономно
    обе можно присваивать и исп. в параметрах др.фции, т.е. быть "callback"
        setTimeout( function (){console.log('Отложенное')}  ,2000) --^
047 Стрелочные функции.mp4  -> ВЫРАЖЕНИЕ -> АНОНИМНАЯ  'function'->'=>'
        setTimeout( ()=>{console.log('Отложенное')}  ,2000)
    ОПУСТИТЬ ()/{}, если 1 параметр/выражение
                 ^--неявный возврат return--^ (1)
048 Значения параметров функции по умолчанию.mp4
    сформировать новый объект неявным (1) ({...}) а не мутировать старый
const newPost = (posr, addedAt = Date()) =>  ({
        ...post, addedAt
    })   ^--оператор разложения spread,
--- 13 Обработка ошибок\049 Обработка ошибок.mp4  -------------------
    ошибка -> Uncaught.. - Непойманная.. -> и выполнение ПРЕКРАЩАЕТСЯ !!
    try/catch  -> б е з  в с е г о  э т о г о
--- 14 Инструкции
050 Инструкции.mp4
051 Выражения-инструкции.mp4
052 Как отличить инструкцию от выражения.mp4
--- 15 Массивы ----------------
053 Массивы.mp4 - как и все в JS объект, но с ЦИФРОВЫМИ (0,1,2..) именами св-в
054 Оператор сравнения для массивов и объектов.mp4
055 Массив vs. Объекта.mp4
            const myO = { 0:1, 1:2, length:2 }  vs. const myA = [1,2]
если развернуть идентичны, HO __proto__= Object vs. = Array(0)
                                                за length отвечает JS, ВСЕГДА АКТУАЛЬНО
                                                порядок элементов ВАЖЕН
056 Как работать с элементами массива.mp4
057 Методы массивов.mp4
    ф-ции высшего порядкя , ф-ции прототипов


058 Метод forEach.mp4
059 Метод map.mp4

--- 16 Деструктуризация --------
060 Деструктуризация объектов.mp4
061 Деструктуризация массивов.mp4
062 Деструктуризация параметров функции.mp4
--- 17 Условные инструкции
063 Условные инструкции.mp4
064 Условная инструкция if else.mp4
065 Условная инструкция if else if.mp4
066 Использование if в функциях.mp4
067 Инструкция switch.mp4
--- 18 Тернарный оператор\068 Тернарный оператор.mp4 -------------
--- 19 Циклы
069 Циклы.mp4
070 Цикл for.mp4
071 Для перебора массивов не нужен for.mp4
072 Цикл while.mp4
073 Цикл do while.mp4
074 Цикл for in.mp4
075 Методы keys и values для объектов.mp4
076 Цикл for in для массивов.mp4
077 Цикл for of.mp4

--- 20 Модули -------
078 Модули.mp4
079 Создание и запуск модулей с помощью Node.mp4
080 Несколько экспортов.mp4
081 Правила работы с модулями.mp4
082 Практика по созданию нескольких экспортов.mp4
083 Как используются модули в React.mp4
---- 21 Классы и прототипы ---------
084 Введение в классы и прототипы.mp4
085 Пример класса.mp4
086 Создание экземпляров класса.mp4
087 Цепочка прототипов.mp4
088 Проверка принадлежности классу.mp4
089 Вызов унаследованных методов.mp4
090 Практика по созданию классов и экземпляров.mp4
091 Проверка принадлежности свойств объектов.mp4
092 Создание нескольких экземпляров.mp4
093 Статические методы.mp4
094 Практика по созданию статических методов.mp4
095 Расширение других классов.mp4
096 Что же такое прототип.mp4
097 Строки и числа ведут себя как объекты.mp4
--- 22.Промисы --------------------------------
098.Введение в промисы.mp4
    запрос на сайт или БД ( работа с внешними устройствами)
    1)ждать ответа - синхронный - нежелательно
      т.к. зависнет интерфейс с юзером, потерается интерактивность
    2)повесить каллбэк - а...- позволит выполнять др.действия
      => Promise - Общение предоставить рез-т позже , или ошибку
    3 состояния : pending - -когда он создается, resolved и rejected
099.Создание и использование промисов.mp4
    Promise -как и все в JS -объект , состоянии pending
    const myP = new Promise ()
    Аргумент конструктора --^-- каллбэк, обязательно 2 аргумента
    (resolve, reject) => { 1)асинх.действия, 2)в рез-те вызвать ф-ции
      ^--resolved(),передав результат или rejected(), передав obj.ошибку }
использование +---^-- с 1 аргументом(каллбэк), через доступные методы:
    then()    ^       --запуск ТОЛЬКО при смене состояния промиса, для опред.действий
        ^-- value => {}
    catch()
     ^--по цепочке
100.Использование промисов в fetch.mp4
    fetch('https://jsonplaceholder.typicode.com/todos') --промис
        .then(response => response.json())  --запуск ТОЛЬКО при смене состояния промиса (1)
        .then(json => console.log(json)) ^--запуск ТОЛЬКО при смене состояния ПРЕДЫДУЩЕГО промиса(2)
        .catch(error => console.log(`ERR: ${error}`))
fetch- возвращает БОЛЬШОЙ объект со множеством служебной инф-ции ответа сервера: Код ответа,...
     (1)непосредственно данные отсутствуют => вызвать ф-цию json() - ТАКЖЕ промис,
     (2) т.к.требуется время распарсить возможно большой массив объектов

101.Практика по использованию промисов и fetch.mp4
    00-45 запускать в окне "https://jsonplaceholder.typicode.com",чтобы разблокироть межсайтовые КУКИ !!
fetch('https://jsonplaceholder.typicode.com/todos')
    .then( response => {      --описывает то, что будет, когда промис будут исполнен
        console.log(response)  --явно вывести ответ
        return response.json() --явно вернуть json(), для вополения действий
     })
    Promise { <state>: "pending" }
    <state>: "fulfilled"  --т.е.уже вернул какой то ответ
    <value>: Array(200) [ {…}, {…}, {…}, … ]
    <prototype>: Promise.prototype { … }
    <value>: Response {   --БОЛЬШОЙ объект со множеством служебной инф-ции ответа сервера
        body: ReadableStream { locked: false }
        bodyUsed: false  ^--вместо непоср.JSON-объекта=>вызвать json(),чтобы конвертировать
        headers: Headers {  }
        ok: true
        redirected: false
        status: 200    --данные корректны
        statusText: "OK"
        type: "basic"
        url: "https://jsonplaceholder.typicode.com/todos"
    }
102.Практика с отклонением промисов.mp4
103.Вызов fetch внутри промиса.mp4

--- 23 Асинхронные функции -------------
104 Асинхронные функции.mp4
105 Использование await внутри асинхронных функций.mp4
106 Пример с async await.mp4
107 Переход с промисов на async await.mp4
108 Обработка ошибок в асинхронных функциях.mp4
109 Ключевые принципы в async await.mp4

24 Завершение\110 Завершение.mp4

c:\Users\User\Downloads\0boo\stashchuk>

098


Docker для начинающих и чайников + практический опыт
----------------------1. Введение---------------------------------
1. Вступление.mp4
2. Обзор Docker.mp4
3. Начинаем!.mp4
4. Демо Установка и настройка Docker.mp4
----------------------2. Команды Docker----------------------
1. Обзор команд.mp4
2. Демо Команды Docker.mp4
3. Демо Лабораторное окружение.mp4
4. Docker Run.mp4
5. Демо Особенности команды docker run.mp4
----------------------3. Образы Docker-------------------------
1. Образы Docker.mp4
2. Демо Создание докер-образа.mp4
3. Переменные окружения.mp4
4. Command & Entrypoint.mp4
----------------------4. Docker Compose-------------------------
1. Docker Compose.mp4
----------------------5. Хранение в Docker----------------------
1. Среда выполнения.mp4
2. Хранилище.mp4
----------------------6. Сеть в Docker------------------------------
1. Сеть в Docker.mp4
----------------------7. Docker Registry-----------------------------
1. Docker Registry.mp4
2. Демо Создание Docker Registry.mp4
----------------------8. Оркестрация контейнеров----------------
1. Оркестрация.mp4
2. Docker Swarm.mp4
3. Kubernetes.mp4
----------------------9. Заключение---------------------------------
1. Заключение.mp4
2. Docker в Windows.mp4
3. Docker на Mac.mp4
4. Введение в YAML.mp4
------------------------------------------------------------------------

----------------------1. Введение---------------------------------
1. Вступление.mp4
2. Обзор Docker.mp4
    пример: node - mogdoDB - redis - ansimble
    => проблема совместимости с ОС-средами , новые разработчики,
    докерам около 10 лет
     - контейнеры LXC(докер), LXD, LXCFS,..-оч низкого урон, трудно настроить
                   vs.виртульных машин BM
     контейнер ... +--BM---+ ...
     |  app  |     |  app  |
     |lib dep|     |lib dep|
     ----докер---- --гипервизор--
     ------------OS -------------
     --аппаратно инфраструктура--
3. Начинаем!.mp4
    Community Ed.       Entreprise Ed.(D..Ent..Mirantis)
    on L W M Cloud      упр-ние хранением, безоп., оркестрации
 Ubuntu 18.04 LTS on VM Vurtualbox  of Window7
 https://docs.docker.com
 [ Docker Desktop 4.4.4 (old 4.2.0) -- D..Engine 20.10.12]
3-07 идем на сайт https://hub.docker.com
    docker/whalesay  версия cowsay
    docker run docker/whalesay cowsay Hi,Alisher!
                        свое приветствие --^

4. Демо Установка и настройка Docker.mp4
----------------------2. Команды Docker----------------------
1. Обзор команд.mp4
2. Демо Команды Docker.mp4
3. Демо Лабораторное окружение.mp4
4. Docker Run.mp4
5. Демо Особенности команды docker run.mp4
----------------------3. Образы Docker-------------------------
1. Образы Docker.mp4
2. Демо Создание докер-образа.mp4
3. Переменные окружения.mp4
4. Command & Entrypoint.mp4
----------------------4. Docker Compose-------------------------
1. Docker Compose.mp4
----------------------5. Хранение в Docker----------------------
1. Среда выполнения.mp4
2. Хранилище.mp4
----------------------6. Сеть в Docker------------------------------
1. Сеть в Docker.mp4
----------------------7. Docker Registry-----------------------------
1. Docker Registry.mp4
2. Демо Создание Docker Registry.mp4
----------------------8. Оркестрация контейнеров----------------
1. Оркестрация.mp4
2. Docker Swarm.mp4
3. Kubernetes.mp4
----------------------9. Заключение---------------------------------
1. Заключение.mp4
2. Docker в Windows.mp4
3. Docker на Mac.mp4
4. Введение в YAML.mp4
------------------------------------------------------------------------